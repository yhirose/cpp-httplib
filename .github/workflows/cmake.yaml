name: CMake

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        preset: [linux-clang, linux-gcc, macos, windows]
        config: [Debug, Release]
        openssl: [OFF, ON]
        brotli: [OFF, ON]
        zlib: [OFF, ON]
        include:
          - preset: linux-clang
            os: ubuntu-latest
            generator: '"Ninja Multi-Config"'
            cc: clang
            cxx: clang++
          - preset: linux-gcc
            os: ubuntu-latest
            generator: '"Ninja Multi-Config"'
            cc: gcc
            cxx: g++
          - preset: macos
            os: macos-latest
            generator: Xcode
          - preset: windows
            os: windows-latest
            generator: '"Visual Studio 17 2022"'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare git for checkout on Windows
        if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout cpp-httplib
        uses: actions/checkout@v3
      - name: Checkout brotli on Windows
        if: runner.os == 'Windows' && matrix.brotli == 'ON'
        uses: actions/checkout@v3
        with:
          repository: google/brotli
          path: brotli
      - name: Checkout zlib on Windows
        if: runner.os == 'Windows' && matrix.zlib == 'ON'
        uses: actions/checkout@v3
        with:
          repository: madler/zlib
          path: zlib

      - name: Set the install path
        shell: cmake -P {0}
        run: file(WRITE cache.cmake "set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install CACHE STRING \"\")\n")

      - name: Set the compiler
        run: |
          echo 'set(CMAKE_C_COMPILER   "${{ matrix.cc  }}" CACHE STRING "")' >> cache.cmake
          echo 'set(CMAKE_CXX_COMPILER "${{ matrix.cxx }}" CACHE STRING "")' >> cache.cmake

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build
      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          echo "set(OPENSSL_ROOT_DIR $(brew --prefix openssl) CACHE STRING \"\")" >> cache.cmake
          echo "set(ZLIB_ROOT        $(brew --prefix zlib)    CACHE STRING \"\")" >> cache.cmake
      - name: Install dependencies on Windows (OpenSSL)
        if: runner.os == 'Windows'
        run: choco install -y openssl
      - name: Install dependencies on Windows (Brotli)
        if: runner.os == 'Windows' && matrix.brotli == 'ON'
        run: |
          cmake -E rm -f brotli/build
          cmake -S brotli -B brotli/build -G ${{ matrix.generator }} -C cache.cmake -DBUILD_SHARED_LIBS=OFF
          cmake --build brotli/build --target install --config ${{ matrix.config }}
          cmake -E rename install/lib/brotlicommon.lib install/lib/brotlicommon-static.lib
          cmake -E rename install/lib/brotlidec.lib    install/lib/brotlidec-static.lib
          cmake -E rename install/lib/brotlienc.lib    install/lib/brotlienc-static.lib
          echo 'set(BROTLI_ROOT_DIR ${CMAKE_INSTALL_PREFIX} CACHE STRING "")' >> cache.cmake
      - name: Install dependencies on Windows (zlib)
        if: runner.os == 'Windows' && matrix.zlib == 'ON'
        run: |
          cmake -S zlib -B zlib/build -G ${{ matrix.generator }} -C cache.cmake
          cmake --build zlib/build --target install --config ${{ matrix.config }}
          echo 'set(ZLIB_ROOT ${CMAKE_INSTALL_PREFIX} CACHE STRING "")' >> cache.cmake

      - name: Configure CMake
        run: >
          cmake -S . -B build -G ${{ matrix.generator }} -C cache.cmake
          -DHTTPLIB_TEST=ON
          -DHTTPLIB_USE_OPENSSL_IF_AVAILABLE=${{ matrix.openssl }}
          -DHTTPLIB_USE_BROTLI_IF_AVAILABLE=${{ matrix.brotli }}
          -DHTTPLIB_USE_ZLIB_IF_AVAILABLE=${{ matrix.zlib }}
          -DHTTPLIB_REQUIRE_OPENSSL=${{ matrix.openssl }}
          -DHTTPLIB_REQUIRE_BROTLI=${{ matrix.brotli }}
          -DHTTPLIB_REQUIRE_ZLIB=${{ matrix.zlib }}
          -DOPENSSL_USE_STATIC_LIBS=${{ runner.os == 'Windows' }}
          -DBROTLI_USE_STATIC_LIBS=${{ runner.os == 'Windows' }}
          -DZLIB_USE_STATIC_LIBS=${{ runner.os == 'Windows' }}

      - name: Build
        run: cmake --build build --config ${{ matrix.config }}

      - name: Test
        id: test
        working-directory: build
        continue-on-error: true
        run: ctest -C ${{ matrix.config }} --timeout 100 --schedule-random

      - name: Rerun failed tests
        if: steps.test.outcome == 'failure'
        working-directory: build
        run: ctest -C ${{ matrix.config }} --timeout 100 --rerun-failed --output-on-failure

      - name: Install
        run: cmake --install build --config ${{ matrix.config }}

  build-mobile:
    strategy:
      fail-fast: false
      matrix:
        preset: [android, ios]
        config: [Debug, Release]
        include:
          - preset: android
            os: ubuntu-latest
            generator: '"Ninja Multi-Config"'
          - preset: ios
            os: macos-latest
            generator: Xcode
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Find android.toolchain.cmake
        if: matrix.preset == 'android'
        run: echo "set(CMAKE_TOOLCHAIN_FILE ${ANDROID_NDK}/build/cmake/android.toolchain.cmake CACHE STRING \"\")" >> cache.cmake

      - name: Generate ios.toolchain.cmake
        if: matrix.preset == 'ios'
        run: |
          echo 'set(CMAKE_SYSTEM_NAME       iOS)'       >> ios.toolchain.cmake
          echo 'set(CMAKE_SYSTEM_PROCESSOR  aarch64)'   >> ios.toolchain.cmake
          echo 'set(CMAKE_OSX_ARCHITECTURES arm64)'     >> ios.toolchain.cmake
          echo 'set(CMAKE_OSX_SYSROOT       iphoneos)'  >> ios.toolchain.cmake
          echo 'set(CMAKE_TOOLCHAIN_FILE    ios.toolchain.cmake CACHE STRING "")' >> cache.cmake

      - name: Configure CMake
        run: >
          cmake -S . -B build -G ${{ matrix.generator }} -C cache.cmake
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
          -DHTTPLIB_COMPILE=ON

      - name: Build
        run: cmake --build build --config ${{ matrix.config }}

      - name: Install
        run: cmake --install build --config ${{ matrix.config }}
